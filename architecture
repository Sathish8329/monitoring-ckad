1. Control Plane Components
The Control Plane is responsible for managing the Kubernetes cluster. It consists of the following components:

1.1. kube-apiserver
Role: The kube-apiserver is the front-end for the Kubernetes Control Plane. It exposes the Kubernetes API, which is the entry point for all administrative tasks.
Functionality:
Handles RESTful requests from users, kubectl, and other components.
Validates and configures data for the API objects, which include pods, services, replication controllers, and others.
1.2. etcd
Role: etcd is a consistent and highly available key-value store used as Kubernetes' backing store for all cluster data.
Functionality:
Stores the entire cluster state.
Used by Kubernetes to store configuration data that other components of the cluster can read or write to.
1.3. kube-scheduler
Role: The kube-scheduler watches for newly created pods that have no node assigned and selects a node for them to run on.
Functionality:
Factors in resource requirements, affinity, taints, and tolerations, and other policies to make scheduling decisions.
Places pods on nodes based on the current state and required specifications.
1.4. kube-controller-manager
Role: The kube-controller-manager runs the controller processes. Each controller is a separate process, but to reduce complexity, they are all compiled into a single binary and run as a single process.
Functionality:
Node Controller: Monitors the state of the nodes and takes action when nodes go down.
Replication Controller: Ensures that the specified number of pod replicas are running at any given time.
Endpoints Controller: Manages the endpoints objects, associating services with pods.
Service Account & Token Controllers: Create default accounts and API access tokens for new namespaces.
1.5. cloud-controller-manager
Role: The cloud-controller-manager is responsible for managing cloud-specific control logic. It interacts with the underlying cloud provider where Kubernetes is deployed.
Functionality:
Node Controller: Checks the cloud provider to determine if a node has been deleted in the cloud after it stops responding.
Route Controller: Manages routes in the cloud provider.
Service Controller: Creates, updates, and deletes cloud provider load balancers.
2. Worker Node Components
Worker Nodes are the machines where containerized applications are actually deployed and run. The components on each node are responsible for maintaining the running pods.

2.1. kubelet
Role: The kubelet is an agent that runs on each worker node. It ensures that containers are running in a pod.
Functionality:
Receives pod definitions from the API server and ensures the containers described are running and healthy.
Monitors the state of pods, and if a container fails, the kubelet will attempt to restart it.
2.2. kube-proxy
Role: The kube-proxy is a network proxy that runs on each worker node. It maintains network rules on nodes.
Functionality:
Manages the routing of traffic between different pods within the cluster or between clients outside the cluster and services inside the cluster.
Implements service abstraction by managing iptables or IPVS rules.
2.3. Container Runtime
Role: The container runtime is the software responsible for running containers on the worker nodes.
Functionality:
Kubernetes supports multiple container runtimes (e.g., Docker, containerd, CRI-O).
The container runtime pulls the container image from a registry, starts, and manages the lifecycle of the containers.
